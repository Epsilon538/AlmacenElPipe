/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Compras;

import Servicios.ServiciosSQL;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Epsilon
 */
public class ComprasPanel extends javax.swing.JPanel {

    Connection Conexion = null;
    Statement stmt = null;
    String productolst;
    String primerProveedor = null;
    /**
     * Creates new form VentasPanel
     */
    public ComprasPanel() {
        initComponents();
        Conexion = ServiciosSQL.conectar();
        LlenarTabla();
        LlenarCombo();
    }
    
    void InsertDetalleCompra(String id, int cantidad, int precio){
        try{
            String x = "";
            stmt = Conexion.createStatement();
            String id_compra = "SELECT max(id_compra) FROM compras";
            ResultSet rs = stmt.executeQuery(id_compra);
            while(rs.next()){
                x = rs.getString(1);
            }
            String InsertQuery = "INSERT INTO detalles_compra(id_compra, id_producto, cantidad, precio) VALUES("+x+","+id+ "," +cantidad+ "," +precio+")";
            stmt.executeUpdate(InsertQuery);
        }catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el stock en la base de datos: " + error.getMessage());
        }
    }
    
    void ActualizarStock(String id, int cantidad, String proveedor, int precio) {
        try {
            String x = "";
            long fechaHoy = System.currentTimeMillis();
            Timestamp fecha = new Timestamp(fechaHoy);
            stmt = Conexion.createStatement();
            String updateQuery = "UPDATE productos SET stock_producto = stock_producto + " + cantidad + " WHERE id_producto = " + id;
            String id_proveedor = "SELECT id_proveedor FROM proveedores WHERE nom_proveedor = '"+proveedor+"'";
            
            stmt.executeUpdate(updateQuery);
            ResultSet rs = stmt.executeQuery(id_proveedor);
            
            while(rs.next()){
                x = rs.getString(1);
            }
            String InsertQueryCompras = "INSERT INTO compras(fecha, id_proveedor) VALUES('" +fecha+ "'," +x+")";
            stmt.executeUpdate(InsertQueryCompras);
            InsertDetalleCompra(id, cantidad, precio);
            
            JOptionPane.showMessageDialog(null, "Compra exitosa");
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el stock en la base de datos: " + error.getMessage());
        }
    }
    
    void LlenarCombo(){
        try{
            stmt = Conexion.createStatement();
            String proveedores = "SELECT nom_proveedor FROM proveedores";
            ResultSet rs = stmt.executeQuery(proveedores);
            
            while(rs.next()){
                cmbProveedor.addItem(rs.getString(1));
            }
            
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el stock en la base de datos: " + error.getMessage());
        }
    }
    
    void LlenarTabla(){
        try{
            stmt=Conexion.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM productos");
            DefaultTableModel model = (DefaultTableModel) TablaCompras.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("id_producto"), rs.getString("nom_producto"), rs.getInt("stock_producto"), rs.getInt("precio_producto")});   
            }
        }catch(HeadlessException | SQLException error){
            JOptionPane.showMessageDialog(null,"No se pudo cargar los datos");
        }
                
    }
    
    private boolean isNumeric(String str) {
        try {
            Integer.parseInt(str);
            return true;
        }catch (NumberFormatException e) {
            return false;
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaCompras = new javax.swing.JTable();
        cmdComprar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbProveedor = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaCarrito = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        cmdAgregarAlCarrito = new javax.swing.JButton();
        txtCantidadProductos = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmdBorrar = new javax.swing.JButton();

        jPanel1.setMaximumSize(new java.awt.Dimension(600, 500));
        jPanel1.setMinimumSize(new java.awt.Dimension(600, 500));

        TablaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Producto", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaCompras);

        cmdComprar.setText("Comprar");
        cmdComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdComprarActionPerformed(evt);
            }
        });

        jLabel1.setText("Cantidad");

        jLabel2.setText("Proveedor");

        jLabel4.setText("Carrito");

        TablaCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Producto", "Cantidad", "Precio C/U", "Proveedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablaCarrito);

        jLabel5.setText("Productos");

        cmdAgregarAlCarrito.setText("Agregar al Carrito");
        cmdAgregarAlCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarAlCarritoActionPerformed(evt);
            }
        });

        jLabel6.setText("Precio");

        cmdBorrar.setText("Borrar");
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(353, 353, 353))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cmdBorrar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(19, 19, 19)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmdComprar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCantidadProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbProveedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdAgregarAlCarrito))))
                        .addGap(33, 33, 33))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCantidadProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdAgregarAlCarrito)
                        .addGap(28, 28, 28)
                        .addComponent(cmdComprar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdBorrar)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdComprarActionPerformed
        DefaultTableModel carritoModel = (DefaultTableModel) TablaCarrito.getModel();

        for (int i = 0; i < carritoModel.getRowCount(); i++) {
            String idProducto = carritoModel.getValueAt(i, 0).toString();
            int cantidad = Integer.parseInt(carritoModel.getValueAt(i, 2).toString());
            String proveedor = carritoModel.getValueAt(i,4).toString();
            int precio = Integer.parseInt(carritoModel.getValueAt(i, 3).toString());
            ActualizarStock(idProducto, cantidad, proveedor, precio);
        }
        
        carritoModel.setRowCount(0);
        LlenarTabla();
    }//GEN-LAST:event_cmdComprarActionPerformed

    private void cmdAgregarAlCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarAlCarritoActionPerformed
        DefaultTableModel carritoModel = (DefaultTableModel) TablaCarrito.getModel();

        int filaSeleccionada = TablaCompras.getSelectedRow();

        if (filaSeleccionada != -1) {

            String idProducto = TablaCompras.getValueAt(filaSeleccionada, 0).toString(); 
            String producto = TablaCompras.getValueAt(filaSeleccionada, 1).toString();
            String precioStr = txtPrecio.getText();
            String cantidadStr = txtCantidadProductos.getText();

            if (cmbProveedor.getItemCount() > 0) {
                String proveedor = cmbProveedor.getSelectedItem().toString();

                if (isNumeric(cantidadStr) && isNumeric(precioStr)) {
                    int precio = Integer.parseInt(precioStr);
                    int cantidad = Integer.parseInt(cantidadStr);
                    if (cantidad > 0) {
                        if (primerProveedor == null) {
                            primerProveedor = proveedor;
                        }
                        if (proveedor.equals(primerProveedor)) {
                            boolean encontrado = false;
                            for (int i = 0; i < carritoModel.getRowCount(); i++) {
                                if (idProducto.equals(carritoModel.getValueAt(i, 0)) && proveedor.equals(carritoModel.getValueAt(i, 4))) {
                                    int cantidadExistente = (int) carritoModel.getValueAt(i, 2);
                                    carritoModel.setValueAt(cantidadExistente + cantidad, i, 2);
                                    encontrado = true;
                                    break;
                                }
                            }
                            if (!encontrado) {
                                Object[] rowData = {idProducto, producto, cantidad, precio, proveedor};
                                carritoModel.addRow(rowData);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Los productos deben ser del mismo proveedor.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad ingresada no es válida.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese números válidos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay proveedores disponibles");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla.");
        }
    }//GEN-LAST:event_cmdAgregarAlCarritoActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        DefaultTableModel carritoModel = (DefaultTableModel) TablaCarrito.getModel();
        int selectedRow = TablaCarrito.getSelectedRow();

        if (selectedRow != -1) {
            carritoModel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto para eliminar de la tabla.");
        }
    }//GEN-LAST:event_cmdBorrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaCarrito;
    private javax.swing.JTable TablaCompras;
    private javax.swing.JComboBox<String> cmbProveedor;
    private javax.swing.JButton cmdAgregarAlCarrito;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdComprar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCantidadProductos;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
